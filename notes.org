* Notes

** What I've done in my life

I've written code I use so I developed care about prototypes,
automated tests, iterative processes and
calmness over heroism.
I made three programs I use every day,
a large hotkey triggered popup window that communicates the battery,
a similar program for the time,
and a system command palette.
I also made a program that I used to use every day,
my interesting images sorter.
The popups were redesigned twice, but the command palette and
the pleasant image sorter went through
five iterations each, similar to web dev rewrite tales.
What's noteworthy is that in every case,
the iterations made the products prettier and more impressive first,
and then uglier and uglier, but on closer inspection it's like
comparing music that's catchy at first to music that sticks long term.
The command palette was a snippet generator once,
and it looked fabulous. If you're overwhelmed everything looks fabulous.

This website was rewritten numerous times,
first abstract with components that choose their identity from a buffee,
then client-side rendered with macros and served almost as-is,
then fully progressively enhanced for Emacs' browser,
then it lost its menus which got replaced with plain text.
That's a linear story going from a complex to a simple design,
while keeping as many positives as possible.
The final design trivialises mobile support, old browser support,
accessibility, localization, theme switching and navigation.
The fascinating part is that it looks neither better nor worse,
it's just different. Spectacularly different for that matter.
It gives off a feeling like a late night show or a poem.
It has very different values, it can't impress and it's
awkwardly unfamiliar, but ultimately this is how I am.

I got obsessed with Robert Martin and after experimenting with
test driven development based off his demonstrations,
I applied it in three University projects.
Two of them are part of subjects that I didn't end up passing
and the third was in a team of people who were unfamiliar with
automated tests and overwhelmed with the project at hand.
I still admire test driven development but I approach it with caution.

I generally got obsessed with Robert Martin's speeches
so I demonstrated prototypes to teammates in the University in
two separate teams, a draft hand written HTML page for the UX class
and a draft piece of a hash table in the low level database class.
In both cases I failed to communicate what the prototype was designed
to say so the conversations focused a lot on how the prototype can't
be applied as final code and on how the prototype focuses on parts
that are described in parts of the assignment that are after the top
of what the paper says.
The experience was frustrating but also enlightening.
Only the teammates know if they're ready for a demonstration.
Maybe it overwhelms, maybe it exposes,
or maybe it enforces unfamiliar processes.
A demonstration can be destructive and I'm not the one to judge that.

My directory structure has recent projects as single letter directories
under the home directory, and all the other projects as long named
directories right under the l directory that's under the home directory,
where l stands for least recently used.
While that sounds like a first idea, it's the final idea
after numerous iterations. The first layout was the expected one,
with directories under directories, categorized with human criteria.
Later layouts used directories for the project assigner
and symlinks to categorize by language or other criteria,
then shell scripts printing project directories that
have things in common, then these shell scripts were modified
to take a callback shell script and recursively pass it to other
shell scripts progressively deeper in directory structure.
The lesson learned is that directories are computer's categories,
grouping permissions or indicating external drives or packaging
data to be moved. They're not human categories like content of picture
or assigner of project. Recursive actions on directories
don't recognize human categories, and will descend further into
each project directory or each picture category.
Human categories are kept in flat hierarchies from the perspective
of the computer and get differenciated using their human aspect,
their name. I hope this insight applies to databases.

Most of the teams I've collaborated with in the University hate me now.
Adrenaline fuelled people don't appreciate that I work calmly,
people taught to follow afrenaline fuelled people overlook me,
people who hibernate to survive critisism avoid me when I despare
to collaborate face to face,
people who only order and critisize mistake me for an easy target
and then freeze repeatedly,
and nobody has aspired to my programming skills so far.
I'm ghosted and I'm abused near deadlines.
There were a few good collaborations, but in most collaborations
there were multiple week long periods where I barely left the bed.
These traumatic experiences force me to understand that
if someone uses stress for motivation I can't calm them down,
I can demonstrate the product of my way of working
and let them think about it. Similarly, if someone only knows
to debug code after writing it, I can't make them doubt their approach.
I can demonstrate an iterative process and let them try it with
me and then give them some time to think about it.
The first is perceived as taking a solution away or adding a problem,
the second is perceived as giving a solution or solving a problem.
Not that I don't want to break their face though.
They think that if they get grades then they should change nothing.

I was a proud piano and programming nerd until the end of the pandemic.
The pandemic and the University student life exposed my lackings
and shortly after, I humbled and became desperate for human connection.
I worshipped average people. Trying to follow conversations made
my head hurt, it felt like the brain swell, very equivalent to
working out after a long time off. I slowly started learning
my family tree and the ins and outs of my University department,
but everything was tiring, to the point that waking up
wasn't always worth the effort. My goal is that in my 30, in 2031,
I'll be good enough at doing the basics that waking up will
be worth the effort most of the days of the week.
The YouTube channel HealthyGamerGG helped massively.
I don't really wish people suffered more but I do wish they
didn't stick to "if it works it works." I can't relate to it.

I user tested three website wireframes for projects of the UX class,
observing the eye movements,
the expectations and the distractions of the person
who pretended to use the website.
I tried to inspire teammates and friends to do user tests too
but I get the impression that they don't like proofs that
they made wrong assumptions.
User testing taught me to start as minimal and as compliant to
standards as possible, and build from there.

